name: Build and Push docker image

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: latest
      IMAGE_NAME: crossjobs-community
      GH_USERNAME: justicea83
      APP_ROOT: ghcr.io/justicea83

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up environment variables for VM credentials
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # setup the environment variable for production
            echo "CURRENT_ENV=prod" >> $GITHUB_ENV

            echo "VM_HOST=${{ secrets.VM_HOST_PROD }}" >> $GITHUB_ENV
          fi

      - name: Create .env file
        run: |
          echo "${{ vars.ENV_PROD }}" > .env
          cat .env  # Optional: Display the contents for debugging (remove in production)
          ls -la


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GH_PAT }}" | docker login ghcr.io -u $GH_USERNAME --password-stdin

      - name: Clear VM Directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.VM_HOST }}
          username: justicea83
          key: ${{ (env.CURRENT_ENV == 'dev' && secrets.VM_SSH_SECRET_DEV) || (env.CURRENT_ENV == 'prod' && secrets.VM_SSH_SECRET_PROD) }}
          script: |
            cd /home/justicea83
            rm -rf docker-compose.c.${{ env.CURRENT_ENV }}.yml

      - name: Transfer docker-compose to VM
        run: |
          # Write the SSH private key to a temporary file
          if [[ "${{ env.CURRENT_ENV }}" == "dev" ]]; then
            echo "${{ secrets.VM_SSH_SECRET_DEV }}" > ssh_key
          elif [[ "${{ env.CURRENT_ENV }}" == "prod" ]]; then
            echo "${{ secrets.VM_SSH_SECRET_PROD }}" > ssh_key
          fi

          chmod 600 ssh_key

          scp -o StrictHostKeyChecking=no -i ssh_key docker-compose.c.${{ env.CURRENT_ENV }}.yml justicea83@${{ env.VM_HOST }}:/home/justicea83

          # Clean up by removing the temporary SSH key file
          rm -f ssh_key

      - name: Build and push images with Docker Compose
        run: |
          docker compose -f docker-compose.${{ env.CURRENT_ENV }}.yml build --no-cache
          docker compose -f docker-compose.${{ env.CURRENT_ENV }}.yml push

      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.VM_HOST }}
          command_timeout: 200m
          username: justicea83
          key: ${{ (env.CURRENT_ENV == 'dev' && secrets.VM_SSH_SECRET_DEV) || (env.CURRENT_ENV == 'prod' && secrets.VM_SSH_SECRET_PROD) }}
          script: |
            cd /home/justicea83

            if [ $( docker ps -a | grep ${{ env.IMAGE_NAME }} | wc -l ) -gt 0 ]; then
               docker compose -f docker-compose.c.${{ env.CURRENT_ENV }}.yml pull
            fi

            docker compose -f docker-compose.c.${{ env.CURRENT_ENV }}.yml up -d --build

            docker image prune -a -f
